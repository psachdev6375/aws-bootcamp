{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "This cloud formation template sets up a VPC and deploys an ElasticBeanStalk stack for DONE 2017",
	"Parameters": {
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m1.small",
				"m1.medium",
				"m1.large",
				"m1.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"c1.medium",
				"c1.xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"g2.2xlarge",
				"g2.8xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"d2.xlarge",
				"d2.2xlarge",
				"d2.4xlarge",
				"d2.8xlarge",
				"hi1.4xlarge",
				"hs1.8xlarge",
				"cr1.8xlarge",
				"cc2.8xlarge",
				"cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"DBClass": {
			"Description": "Database instance class",
			"Type": "String",
			"Default": "db.t2.micro",
			"AllowedValues": [
				"db.m4.large",
				"db.m4.xlarge",
				"db.m4.2xlarge",
				"db.m4.4xlarge",
				"db.m4.10xlarge",
				"db.r3.large",
				"db.r3.xlarge",
				"db.r3.2xlarge",
				"db.r3.4xlarge",
				"db.r3.8xlarge",
				"db.m2.xlarge",
				"db.m2.2xlarge",
				"db.m2.4xlarge",
				"db.cr1.8xlarge",
				"db.t2.micro",
				"db.t2.small",
				"db.t2.medium",
				"db.t2.large"
			],
			"ConstraintDescription": "must select a valid database instance type."
		},
		"DBName": {
			"Default": "capsuledb",
			"Description": "The DONE 2017 Capsule database name",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"DBUser": {
			"Default": "capsuledb",
			"NoEcho": "true",
			"Description": "The DONE 2017 Capsule database admin account username",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"DBPassword": {
			"Default": "capsuledb",
			"NoEcho": "true",
			"Description": "The DONE 2017 Capsule database admin account password",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},
		"MultiAZDatabase": {
			"Default": "false",
			"Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
			"Type": "String",
			"AllowedValues": [
				"true",
				"false"
			],
			"ConstraintDescription": "must be either true or false."
		},
		"DBAllocatedStorage": {
			"Default": "5",
			"Description": "The size of the database (Gb)",
			"Type": "Number",
			"MinValue": "5",
			"MaxValue": "1024",
			"ConstraintDescription": "must be between 5 and 1024Gb."
		}
	},
	"Mappings": {
		"Region2Principal": {
			"us-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"eu-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"eu-west-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-south-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-east-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ca-central-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"sa-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"cn-north-1": {
				"EC2Principal": "ec2.amazonaws.com.cn",
				"OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
			},
			"eu-central-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"InstanceTenancy": "default",
				"Tags": [
					{
						"Key": "Name",
						"Value": "VPCPuneet"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Name",
						"Value": "VPCPuneetInternetGateway"
					}
				]
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnet1a": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": "ap-south-1a",
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.1.0/24",
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Name",
						"Value": "Public-1A-10.0.1.0"
					}
				]
			}
		},
		"PublicSubnet1b": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": "ap-south-1b",
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.2.0/24",
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Name",
						"Value": "Public-1B-10.0.2.0"
					}
				]
			}
		},
		"PrivateSubnet1a": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": "ap-south-1a",
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.3.0/24",
				"MapPublicIpOnLaunch": "false",
				"Tags": [
					{
						"Key": "Name",
						"Value": "Private-1A-10.0.3.0"
					}
				]
			}
		},
		"PrivateSubnet1b": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": "ap-south-1b",
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.4.0/24",
				"MapPublicIpOnLaunch": "false",
				"Tags": [
					{
						"Key": "Name",
						"Value": "Private-1B-10.0.4.0"
					}
				]
			}
		},
		"RouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "PuneetVPCPublicRouteTable"
					}
				]
			}
		},
		"InternetRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "InternetGateway",
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			}
		},
		"SubnetPublicRouteAssociation1A": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTable"
				},
				"SubnetId": {
					"Ref": "PublicSubnet1a"
				}
			}
		},
		"SubnetPublicRouteAssociation1B": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTable"
				},
				"SubnetId": {
					"Ref": "PublicSubnet1b"
				}
			}
		},
		"SecurityGroupWebDMZ": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "WebDMZ-SG",
				"GroupDescription": "Security Group for servers in the Web DMZ. SSH, HTTP, HTTPS allowed in",
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "WebDMZ-SG-PuneetVPC"
					}
				],
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"SecurityGroupMySQL": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "RDS-MySQL-SG",
				"GroupDescription": "Security Group for MySQL servers in the Private Subnet. Only ports 22 and 3306 allowed in from public SG",
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "MySQL-Private-SG-PuneetVPC"
					}
				],
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "3306",
						"SourceSecurityGroupId": {
							"Ref": "SecurityGroupWebDMZ"
						}
					}
				]
			}
		},
		"dbSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "Availability Zones for RDS DB",
				"SubnetIds": [
					{
						"Ref": "PrivateSubnet1a"
					},
					{
						"Ref": "PrivateSubnet1b"
					}
				]
			}
		},
		"DBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBName": {
					"Ref": "DBName"
				},
				"Engine": "MySQL",
				"MultiAZ": {
					"Ref": "MultiAZDatabase"
				},
				"MasterUsername": {
					"Ref": "DBUser"
				},
				"MasterUserPassword": {
					"Ref": "DBPassword"
				},
				"DBInstanceClass": {
					"Ref": "DBClass"
				},
				"AllocatedStorage": {
					"Ref": "DBAllocatedStorage"
				},
				"VPCSecurityGroups": [
					{
						"Fn::GetAtt": [
							"SecurityGroupMySQL",
							"GroupId"
						]
					}
				],
				"DBSubnetGroupName": {
					"Ref": "dbSubnetGroup"
				},
				"PubliclyAccessible": "false"
			}
		},
		"DONE2017Application": {
			"Type": "AWS::ElasticBeanstalk::Application",
			"Properties": {
				"Description": "DONE 2017 Application",
				"ApplicationVersions": [
					{
						"VersionLabel": "Initial Version",
						"Description": "Version 1.0",
						"SourceBundle": {
							"S3Bucket": "puneet-elasticbeanstalk-deployables",
							"S3Key": "capsule.jar"
						}
					}
				]
			}
		},
		"WebServerRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									{
										"Fn::FindInMap": [
											"Region2Principal",
											{
												"Ref": "AWS::Region"
											},
											"EC2Principal"
										]
									}
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/"
			}
		},
		"WebServerRolePolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "WebServerRole",
				"PolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"NotAction": "iam:*",
							"Resource": "*"
						}
					]
				},
				"Roles": [
					{
						"Ref": "WebServerRole"
					}
				]
			}
		},
		"WebServerInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "WebServerRole"
					}
				]
			}
		},
		"DONE2017DevEnvironment": {
			"Type": "AWS::ElasticBeanstalk::Environment",
			"Properties": {
				"ApplicationName": {
					"Ref": "DONE2017Application"
				},
				"Description": "DONE 2017 Elastic Beanstalk Environment Template",
				"SolutionStackName": "64bit Amazon Linux 2017.09 v2.6.1 running Java 8",
				"OptionSettings": [
					{
						"Namespace": "aws:elasticbeanstalk:application:environment",
						"OptionName": "RDS_USERNAME",
						"Value": {
							"Ref": "DBUser"
						}
					},
					{
						"Namespace": "aws:elasticbeanstalk:application:environment",
						"OptionName": "RDS_PASSWORD",
						"Value": {
							"Ref": "DBPassword"
						}
					},
					{
						"Namespace": "aws:elasticbeanstalk:application:environment",
						"OptionName": "RDS_DB_NAME",
						"Value": {
							"Ref": "DBName"
						}
					},
					{
						"Namespace": "aws:elasticbeanstalk:application:environment",
						"OptionName": "RDS_HOSTNAME",
						"Value": {
							"Fn::GetAtt": [
								"DBInstance",
								"Endpoint.Address"
							]
						}
					},
					{
						"Namespace": "aws:elasticbeanstalk:application:environment",
						"OptionName": "RDS_PORT",
						"Value": {
							"Fn::GetAtt": [
								"DBInstance",
								"Endpoint.Port"
							]
						}
					},
					{
						"Namespace": "aws:ec2:vpc",
						"OptionName": "Subnets",
						"Value": {
							"Fn::Join": [
								",",
								[
									{
										"Ref": "PublicSubnet1a"
									},
									{
										"Ref": "PublicSubnet1b"
									}
								]
							]
						}
					},
					{
						"Namespace": "aws:ec2:vpc",
						"OptionName": "ELBSubnets",
						"Value": {
							"Fn::Join": [
								",",
								[
									{
										"Ref": "PublicSubnet1a"
									},
									{
										"Ref": "PublicSubnet1b"
									}
								]
							]
						}
					},
					{
						"Namespace": "aws:ec2:vpc",
						"OptionName": "VPCId",
						"Value": {
							"Ref": "VPC"
						}
					},
					{
						"Namespace": "aws:autoscaling:launchconfiguration",
						"OptionName": "SecurityGroups",
						"Value": {
							"Ref": "SecurityGroupWebDMZ"
						}
					},
					{
          				"Namespace" : "aws:autoscaling:launchconfiguration",
          				"OptionName" : "EC2KeyName",
          				"Value" : "puneetsachdev"
        			},
					{
						"Namespace": "aws:autoscaling:launchconfiguration",
						"OptionName": "IamInstanceProfile",
						"Value": {
							"Ref": "WebServerInstanceProfile"
						}
					}
				]
			}
		}
	},
	"Outputs": {
		"WebsiteURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"http://",
						{
							"Fn::GetAtt": [
								"DONE2017DevEnvironment",
								"EndpointURL"
							]
						},
						"/"
					]
				]
			},
			"Description": "Done Service URL"
		},
		"DBEndpoint": {
			"Value": {
				"Fn::Join": [
					"",
					[
						{
							"Fn::GetAtt": [
								"DBInstance",
								"Endpoint.Address"
							]
						},
						":",
						{
							"Fn::GetAtt": [
								"DBInstance",
								"Endpoint.Port"
							]
						}
					]
				]
			},
			"Description": "DONE DB Endpoint"
		}
	}
}